[config]
default_to_workspace = false

[config.modify_core_tasks]
private = true
namespace = "default"

[env]
CROSS_TARGET = "arm-unknown-linux-gnueabihf"
NIGHTPI_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}"
WASM_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}/wasm"

[tasks.default]
alias = "build"

## Deploy/Run
[tasks.deploy]
category = "Run"
condition = { env_set = ["NIGHTPI_DEPLOY_IP", "NIGHTPI_DEPLOY_DIR"] }
dependencies = ["build"]
cwd = "${NIGHTPI_DIR}"
script_runner = "@duckscript"
script = [
'''
home = get_home_dir
makefile_dir = pwd
exec --fail-on-error docker run --rm -i -e NIGHTPI_DEPLOY_IP -e NIGHTPI_DEPLOY_DIR -v "${home}/.ssh:/ssh:ro" -v "${makefile_dir}:/project:ro" instrumentisto/rsync-ssh sh /project/.makefile/deploy.sh /project/target/${CROSS_TARGET}/debug
'''
]

[tasks.deploy-release]
category = "Run"
condition = { env_set = ["NIGHTPI_DEPLOY_IP", "NIGHTPI_DEPLOY_DIR"] }
dependencies = ["build-release"]
cwd = "${NIGHTPI_DIR}"
script_runner = "@duckscript"
script = [
'''
home = get_home_dir
makefile_dir = pwd
exec --fail-on-error docker run --rm -i -e NIGHTPI_DEPLOY_IP -e NIGHTPI_DEPLOY_DIR -v "${home}/.ssh:/ssh:ro" -v "${makefile_dir}:/project:ro" instrumentisto/rsync-ssh sh /project/.makefile/deploy.sh /project/target/${CROSS_TARGET}/release
'''
]

[tasks.run]
category = "Run"
condition = { env_set = ["NIGHTPI_DEPLOY_IP", "NIGHTPI_DEPLOY_DIR"] }
dependencies = ["deploy"]
cwd = "${NIGHTPI_DIR}"
command = "ssh"
args = ["-t", "-t", "${NIGHTPI_DEPLOY_IP}", "echo Started && '${NIGHTPI_DEPLOY_DIR}/nightpi'"]

[tasks.run-release]
category = "Run"
condition = { env_set = ["NIGHTPI_DEPLOY_IP", "NIGHTPI_DEPLOY_DIR"] }
dependencies = ["deploy-release"]
cwd = "${NIGHTPI_DIR}"
command = "ssh"
args = ["-t", "-t", "${NIGHTPI_DEPLOY_IP}", "echo Started && '${NIGHTPI_DEPLOY_DIR}/nightpi'"]

## CI
[tasks.ci]
description = "Build and run tests."
category = "CI"
dependencies = [
    "default::print-env-flow",
    "build",
    "check-format",
    "clippy",
    "test"
]

## Dependencies
[tasks.install-cross]
description = "Installs cross crate."
category = "Dependencies"
install_crate = { crate_name = "cross", binary = "cross", test_arg = "-V" }

[tasks.install-wasm-pack]
extend = "default::install-wasm-pack"
private = false
category = "Dependencies"

[tasks.install-rustfmt]
extend = "default::install-rustfmt"
private = false
category = "Dependencies"

## Build
[tasks.build]
clear = true
description = "Build the project."
category = "Build"
dependencies = [
    "build-nightpi",
    "build-wasm"
]

[tasks.build-release]
clear = true
description = "Build the project (release)."
category = "Build"
dependencies = [
    "build-nightpi-release",
    "build-wasm-release"
]

[tasks.build-nightpi]
description = "Build nightpi executable."
category = "Build"
cwd = "${NIGHTPI_DIR}"
command = "cross"
args = ["build", "--target=${CROSS_TARGET}", "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )"]
dependencies = ["install-cross", "copy-wasm"]

[tasks.build-nightpi-release]
description = "Build nightpi executable (release)."
category = "Build"
cwd = "${NIGHTPI_DIR}"
command = "cross"
args = ["build", "--release", "--target=${CROSS_TARGET}", "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )"]
dependencies = ["install-cross", "copy-wasm-release"]

[tasks.build-wasm]
extend = "default::wasm-pack-base"
description = "Build WASM."
category = "Build"
cwd = "${WASM_DIR}"
args = ["build", "--target=web", "--out-name=nightpi", "--dev"]

[tasks.build-wasm-release]
extend = "default::wasm-pack-base"
description = "Build WASM (release)."
category = "Build"
cwd = "${WASM_DIR}"
args = ["build", "--target=web", "--out-name=nightpi"]

[tasks.copy-wasm]
description = "Copy the WASM module to the assets folder."
category = "Build"
dependencies = ["build-wasm"]
cwd = "${NIGHTPI_DIR}"
command = "docker"
args = ["run", "--rm", "-it", "-v", "${CARGO_MAKE_WORKING_DIRECTORY}:/project", "instrumentisto/rsync-ssh",
        "rsync", "-dvucE", "--del", "--delete-excluded", "--inplace", "--include=*.js", "--include=*.wasm", "--exclude=*", "/project/wasm/pkg/", "/project/assets/wasm"]

[tasks.copy-wasm-release]
extend = "copy-wasm"
description = "Copy the WASM module to the assets folder (release)."
dependencies = ["build-wasm-release"]

## Cleanup
[tasks.clean]
clear = true
description = "Cleans the workspace."
category = "Cleanup"
dependencies = [
    "clean-nightpi",
    "clean-wasm"
]

[tasks.clean-nightpi]
description = "Cleans the nightpi directory."
category = "Cleanup"
cwd = "${NIGHTPI_DIR}"
command = "cargo"
args = ["clean"]

[tasks.clean-wasm]
description = "Cleans the WASM directory."
category = "Cleanup"
cwd = "${WASM_DIR}"
command = "cargo"
args = ["clean"]
dependencies = ["clean-wasm-pkg"]

[tasks.clean-wasm-pkg]
description = "Cleans the WASM pkg directory."
category = "Cleanup"
condition = { files_exist = ["${WASM_DIR}/pkg/package.json"] }
cwd = "${WASM_DIR}"
script_runner = "@shell"
script = [
'''
rm -rf pkg
'''
]

## Format
[tasks.format]
description = "Runs the cargo rustfmt plugin."
category = "Development"
dependencies = [
    "format-nightpi",
    "format-wasm"
]

[tasks.format-nightpi]
extend = "default::format"
private = false
description = "Runs the cargo rustfmt plugin in nightpi."
cwd = "${NIGHTPI_DIR}"

[tasks.format-wasm]
extend = "default::format"
private = false
description = "Runs the cargo rustfmt plugin in nightpi-wasm."
cwd = "${WASM_DIR}"

[tasks.check-format]
description = "Runs cargo fmt to check appropriate code format."
category = "Test"
dependencies = [
    "check-format-nightpi",
    "check-format-wasm"
]

[tasks.check-format-nightpi]
extend = "default::check-format"
private = false
description = "Runs cargo fmt to check appropriate code format in nightpi."
cwd = "${NIGHTPI_DIR}"

[tasks.check-format-wasm]
extend = "default::check-format"
private = false
description = "Runs cargo fmt to check appropriate code format in nightpi-wasm."
cwd = "${WASM_DIR}"

## Test
[tasks.clippy]
description = "Runs clippy code linter."
category = "Test"
dependencies = [
    "clippy-nightpi",
    "clippy-wasm"
]

[tasks.clippy-nightpi]
extend = "default::clippy"
private = false
description = "Runs clippy code linter in nightpi."
category = "Test"
cwd = "${NIGHTPI_DIR}"

[tasks.clippy-wasm]
extend = "default::clippy"
private = false
description = "Runs clippy code linter in nightpi-wasm."
cwd = "${WASM_DIR}"

[tasks.test]
description = "Runs all available tests."
category = "Test"
dependencies = [
    "test-nightpi"
]

[tasks.test-nightpi]
description = "Runs all available tests in nightpi."
category = "Test"
cwd = "${NIGHTPI_DIR}"
command = "cross"
args = ["test", "--target=${CROSS_TARGET}", "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )"]
dependencies = ["install-cross"]